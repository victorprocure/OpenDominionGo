name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install npm dependencies
        run: npm ci
      - name: Build CSS assets
        run: npm run build
      - name: Generate code (templ)
        run: |
          set -e
          # Run go generate (tools-tagged files), then fall back to templ if nothing created.
          go generate -tags=tools ./... || true
          if ! ls components/*_templ.go >/dev/null 2>&1; then
            echo "No *_templ.go files found; invoking templ directly as fallback"
            go run github.com/a-h/templ/cmd/templ@v0.3.943 generate
          fi

          # Wait up to several seconds for generated files to appear. This avoids race in CI.
          FOUND=0
          for i in 1 2 3 4 5; do
            if ls components/*_templ.go >/dev/null 2>&1; then
              FOUND=1
              break
            fi
            echo "templ files not present yet; sleeping... ($i)"
            sleep 1
          done
          if [ "$FOUND" -ne 1 ]; then
            echo "ERROR: templ did not generate expected files under components/"
            echo "Current components dir listing:"
            ls -la components || true
            exit 1
          fi
          echo "templ generation completed; listing components:" 
          ls -la components | sed -n '1,200p'
      - name: Build
        run: go build ./...
      - name: Test
        run: go test ./...
      - name: Install and run golangci-lint (built with CI Go)
        run: |
          set -e
          # Build golangci-lint with the same Go toolchain used in this job
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          export PATH="$PATH:$(go env GOPATH)/bin"
          golangci-lint run --timeout=3m
